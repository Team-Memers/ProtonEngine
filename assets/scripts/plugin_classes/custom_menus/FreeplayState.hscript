var vocals;
var songs = [];
var bgs = [];

var selector;
var curSelected = 0;
var curDifficulty = 1;
var soundTestSong;
var scoreText;
var diffText;
var lerpScore = 0;
var intendedScore = 0;
var intendedAccuracy = 0;
var lerpAccuracy = 0;
var bg;
var bgInfo = [];
var bgDir = [];
var bgNames = [];
var categoryBG = [];
var categoriesNames = [];
var iconArray = [];
var isPixelIcon = [];
var usingCategoryScreen = false;
var nightcoreMode = false;
var daycoreMode = false;
var grpSongs;
var curPlaying = false;
var charJson;
var iconJson;
var record;
var recordPixel;
var curOverlay;
var infoPanel;

function create()
{
	for (songSnippet in FreeplayState.currentSongList) 
	{
		var songData = new SongMetadata(songSnippet.name, songSnippet.week, songSnippet.character);
		if (songSnippet.flags == null || songSnippet.flags.length == 0)
			songs.push(songData);
		else {
			var canUse = true;
			for (flag in songSnippet.flags) {
				switch (flag) {
					case 'debug':
						if (debugTarget)
							continue;
						else
						{
							canUse = false;
							break;
						}
					default:
						var reg = new EReg("week-(.+)", "g");
						if (reg.match(flag)) {
							var week = Std.parseInt(reg.matched(1));
							var diffJson = CoolUtil.parseJson(FNFAssets.getJson("assets/images/custom_difficulties/difficulties"));
							var difficultiesFP = diffJson.difficulties;
							var existsWeek = false;
							for (diff in 0...difficultiesFP.length) {
								if (Highscore.getWeekScore(week, diff) != 0) {
									existsWeek = true;
									break;
								}
									
							}
							if (existsWeek) {
								continue;
							} else {
								canUse = false;
								break;
							}
						}
						var songReg = new EReg("song-(.+)", "g");
						if (songReg.match(flag)) {
							var songie = songReg.matched(1);
							var diffJson = CoolUtil.parseJson(FNFAssets.getJson("assets/images/custom_difficulties/difficulties"));
							var existsSong = false;
							for (diff in 0...diffJson.difficulties.length) {
								if (Highscore.getScore(songie, diff) != 0) {
									existsSong = true;
									break;
								}
							}
							if (!existsSong) {
								canUse = false;
								break;
							}
								
						}
				}
			}
			if (canUse) 
				songs.push(songData);
		}
	}

	curDifficulty = DifficultyIcons.getDefaultDiffFP();
	if (FlxG.sound.music != null)
	{
		if (!FlxG.sound.music.playing)
			FlxG.sound.playMusic('assets/music/freakyMenu' + TitleState.soundExt);
	}

	if (!FlxG.sound.music.playing)
	{
		FlxG.sound.playMusic(FNFAssets.getSound('assets/music/custom_menu_music/'
			+ CoolUtil.parseJson(FNFAssets.getJson("assets/music/custom_menu_music/custom_menu_music")).Menu
			+ '/freakyMenu'
			+ TitleState.soundExt));
	}

	var isDebug = false;
	charJson = CoolUtil.parseJson(FNFAssets.getJson('assets/images/custom_chars/custom_chars'));
	iconJson = CoolUtil.parseJson(FNFAssets.getJson("assets/images/custom_chars/icon_only_chars"));
	
	if (debugTarget)
		isDebug = true;

	// LOAD CHARACTERS
	if (FreeplayState.soundTest) 
	{
		// disable auto pause. I NEED MUSIC
		setAutoPause(false);
		curDifficulty = 0;
	}

	// imagine making a sprite and not assigning a var
	bg = new FlxSprite();
	if (FNFAssets.exists('assets/images/Custom_Menu_BGs/Default/menuDesat.png')) {
		bg.loadGraphic('assets/images/Custom_Menu_BGs/Default/menuDesat.png');
	} else {
			bg.loadGraphic('assets/images/menuDesat.png');
		}
	add(bg);
	grpSongs = new FlxGroup();
	add(grpSongs);

	for (i in 0...songs.length)
	{
		var songText = new Alphabet(0, (70 * i) + 30, songs[i].songName, true, false, false, null, null, null, true);
		if (!OptionsHandler.options.style) {
			songText.itemType = "Classic";
		}
		songText.isMenuItem = true;
		songText.targetY = i;
		grpSongs.add(songText);

		var icon = new HealthIcon(songs[i].songCharacter);
		icon.sprTracker = songText;
		// icons won't be visible 
		icon.visible = !OptionsHandler.options.style;
		iconArray.push(icon);
		add(icon);
	}

	
	scoreText = new FlxText(FlxG.width * 0.62, 5, 0, "", 32);
	// scoreText.autoSize = false;
	scoreText.setFormat("assets/fonts/vcr.ttf", 32, 0xFFffffff, "right");
	// scoreText.alignment = RIGHT;

	var scoreBG = new FlxSprite(scoreText.x - 6, 0).makeGraphic(Std.int(FlxG.width * 0.4), 66, 0xFF000000);
	scoreBG.alpha = 0.6;
	add(scoreBG);

	diffText = new FlxText(scoreText.x, scoreText.y + 36, 0, "", 24);
	if (!FreeplayState.soundTest && OptionsHandler.options.style) {
		diffText.x = scoreText.x;
		diffText.y = scoreText.y;
		diffText.size = scoreText.size;
	}
	diffText.font = scoreText.font;
	add(diffText);
	if (FreeplayState.soundTest || !OptionsHandler.options.style)
		add(scoreText);
	var curCharacter = songs[0].songCharacter;
	
	if (OptionsHandler.options.style) {
		record = new Record(FlxG.width, FlxG.height, Reflect.field(charJson, curCharacter).colors, songs[0].week, Highscore.getComplete(songs[0].songName, curDifficulty));
		// DON'T update hitbox, it breaks everything
		record.scale.set(0.7, 0.7);
		record.x -= record.width / 1.5;
		record.y -= record.height / 1.5;
		add(record);
	}

	//var qtooltip = new Tooltip(10, 0, Controls.Action.LEFT_TAB, "info backwards", Keyboard, true);
	//qtooltip.y = FlxG.height - qtooltip.height;
	//var etooltip = new Tooltip(10, qtooltip.y, Controls.Action.RIGHT_TAB, "info forwards", Keyboard, true);
	//etooltip.x = qtooltip.x + qtooltip.width + 10;
	//add(etooltip);
	//add(qtooltip);
	infoPanel = new SongInfoPanel(FlxG.width - 500, 100, songs[0].songName, curDifficulty);
	if (!FreeplayState.soundTest && OptionsHandler.options.style)
		add(infoPanel);

	changeSelection(0);
	changeDiff(0);
	selector = new FlxText();

	selector.size = 40;
	selector.text = ">";
	// add(selector);
}

function update(elapsed)
{
	// :grief: what
	if (FlxG.sound.music.volume < 0.7 && (!FreeplayState.soundTest || curDifficulty != 2))
	{
		FlxG.sound.music.volume += 0.5 * FlxG.elapsed;
	}
	// why the fuck does this exist
	lerpScore = Math.floor(FlxMath.lerp(lerpScore, intendedScore, 0.4));
	lerpAccuracy = Std.int(Math.round(intendedAccuracy * 100));
	if (Math.abs(lerpScore - intendedScore) <= 10)
		lerpScore = intendedScore;
	if (!FreeplayState.soundTest)
		scoreText.text = "PERSONAL BEST:" + lerpScore + ", " + lerpAccuracy + "%";
	else
		scoreText.text = "Sound Test";
	var upP = controls.UP_MENU;
	var downP = controls.DOWN_MENU;
	var accepted = controls.ACCEPT;
	if (debugTarget)
	{
		if (FlxG.keys.justPressed.F5) {
			Highscore.saveScore('Tutorial', 0, 1, 0, Sick);
		}
	}
	if (FreeplayState.soundTest && soundTestSong != null) {
		Conductor.songPosition += FlxG.elapsed * 1000;
	}
	var holdShift = FlxG.keys.pressed.SHIFT;
	if (upP)
	{
		if (!holdShift)
			changeSelection(-1);
		else
			changeSelection(-10);
	}
	if (downP)
	{
		if (!holdShift)
			changeSelection(1);
		else
			changeSelection(10);
	}
	if (controls.LEFT_MENU)
		changeDiff(-1);
	if (controls.RIGHT_MENU)
		changeDiff(1);
	
	if (controls.LEFT_TAB)
		infoPanel.changeDisplay(-1);
	else if (controls.RIGHT_TAB)
		infoPanel.changeDisplay(1);
	if (controls.BACK)
	{
		// main menu or else we are cursed
		FlxG.autoPause = true;
		if (FreeplayState.soundTest)
			LoadingState.loadAndSwitchState(new SaveDataState());
		else {
			var epicCategoryJs = CoolUtil.parseJson(FNFAssets.getJson('assets/data/freeplaySongJson'));
			if (epicCategoryJs.length > 1)
			{
				LoadingState.loadAndSwitchState(new CategoryState());
			} else
				LoadingState.loadAndSwitchState(new MainMenuState());
		}
			
	}

	if (accepted)
	{
		// im shortening this for my mind to be at rest
		if (FreeplayState.soundTest)
		{
			// play both the vocals and inst
			// bad music >:(
			var suffix = "";
			if (nightcoreMode)
				suffix = "-Nightcore";
			if (daycoreMode)
				suffix = "-Daycore";
			var shit = "";
			
			FlxG.sound.music.stop();
			if (vocals != null && vocals.playing)
				vocals.stop();
			soundTestSong = Song.loadFromJson(songs[curSelected].songName.toLowerCase(), songs[curSelected].songName.toLowerCase());
			if (soundTestSong.needsVoices)
			{
				if (OptionsHandler.options.stressTankmen
					&& FNFAssets.exists("assets/music/" + soundTestSong.song + "Shit" + suffix + "_Voices" + TitleState.soundExt))
					shit = "Shit";
				var vocalSound = FNFAssets.getSound("assets/music/" + soundTestSong.song + shit + suffix + "_Voices" + TitleState.soundExt);
				vocals = new FlxSound().loadEmbedded(vocalSound);

				if (curDifficulty == 0)
					vocals.volume = 1;
				else if (curDifficulty == 1)
					vocals.volume = 0;
				else
					vocals.volume = 0;

				FlxG.sound.list.add(vocals);
				vocals.play();
				vocals.pause();
				vocals.looped = true;
			}
			if (OptionsHandler.options.stressTankmen
				&& FNFAssets.exists("assets/music/" + soundTestSong.song + "Shit" + suffix + "_Inst" + TitleState.soundExt))
				shit = "Shit";
			else
				shit = "";

			var cvolume;
			if (curDifficulty == 0)
				cvolume = 1;
			else if (curDifficulty == 1)
				cvolume = 1;
			else
				cvolume = 0;

			FlxG.sound.playMusic(FNFAssets.getSound("assets/music/" + soundTestSong.song + suffix + "_Inst" + TitleState.soundExt), cvolume);
			Conductor.mapBPMChanges(soundTestSong);
			Conductor.changeBPM(soundTestSong.bpm);
			if (soundTestSong.needsVoices)
			{
				resyncVocals();
			}
		}
		else
		{
			var poop = songs[curSelected].songName.toLowerCase() + DifficultyIcons.getEndingFP(curDifficulty);
			trace(poop);
			if (!FNFAssets.exists('assets/data/' + songs[curSelected].songName.toLowerCase() + '/' + poop.toLowerCase() + '.json'))
			{
				// assume we pecked up the difficulty, return to default difficulty
				trace("UH OH SONG IN SPECIFIED DIFFICULTY DOESN'T EXIST\nUSING DEFAULT DIFFICULTY");
				poop = songs[curSelected].songName;
				curDifficulty = DifficultyIcons.getDefaultDiffFP();
			}
			trace(poop);

			PlayState.SONG = Song.loadFromJson(poop, songs[curSelected].songName.toLowerCase());
			PlayState.isStoryMode = false;
			ModifierState.isStoryMode = false;
			PlayState.storyDifficulty = curDifficulty;
			if (!OptionsHandler.options.skipModifierMenu)
				LoadingState.loadAndSwitchState(new ModifierState());
			else
			{
				if (FlxG.sound.music != null)
					FlxG.sound.music.stop();
				LoadingState.loadAndSwitchState(new PlayState(), true);
			}
		}
		

	}
}

function changeDiff(change)
{
	if (!FreeplayState.soundTest) {
		// get valid one : )
		// also forces
		var difficultyObject = DifficultyManager.changeDifficultySans(curDifficulty, change, songs[curSelected].songName);
		curDifficulty = difficultyObject.difficulty;
		//FlxG.camera.flash(0xFFffffff, 1);

		intendedScore = Highscore.getScore(songs[curSelected].songName, curDifficulty);
		intendedAccuracy = Highscore.getAccuracy(songs[curSelected].songName, curDifficulty);

		diffText.text = difficultyObject.text;
	} else {
		curDifficulty += change;
		if (curDifficulty > 2) {
			curDifficulty = 0;
		}
		if (curDifficulty < 0) {
			curDifficulty = 2;
		}
		switch (curDifficulty) {
			case 0:
				diffText.text = "Both tracks";
			case 1:
				diffText.text = "Inst Only";
			case 2:
				diffText.text = "Vocals Only";
		}
		
	}
	// do it here for the sweet sweet gold record
	infoPanel.changeSong(songs[curSelected].songName, curDifficulty);
	if (OptionsHandler.options.style)
	{
		var coolors = ["black"];
		if (Reflect.hasField(charJson, songs[curSelected].songCharacter))
		{
			coolors = Reflect.field(charJson, songs[curSelected].songCharacter).colors;
		}
		else
		{
			coolors = Reflect.field(iconJson, songs[curSelected].songCharacter).colors;
		}
		record.changeColor(coolors, songs[curSelected].songCharacter, songs[curSelected].week,
			songs[curSelected].songName, curDifficulty);
	}
}
function stepHit(step)
{
	if (FreeplayState.soundTest && soundTestSong != null && soundTestSong.needsVoices && curDifficulty == 0)
	{
		if (vocals.time > Conductor.songPosition + 20 || vocals.time < Conductor.songPosition - 20)
		{
			resyncVocals();
		}
	}

}

function resyncVocals()
{
	vocals.pause();

	FlxG.sound.music.play();
	
	Conductor.songPosition = FlxG.sound.music.time;
	vocals.time = Conductor.songPosition;
	vocals.play();
}

function changeSelection(change)
{

	FlxG.sound.play('assets/sounds/custom_menu_sounds/'+CoolUtil.parseJson(FNFAssets.getText("assets/sounds/custom_menu_sounds/custom_menu_sounds.json")).customMenuScroll+'/scrollMenu' + TitleState.soundExt, 0.4);

	curSelected += change;

	if (curSelected < 0)
		curSelected = songs.length - 1;
	if (curSelected >= songs.length)
		curSelected = 0;

	intendedScore = Highscore.getScore(songs[curSelected].songName, curDifficulty);
	intendedAccuracy = Highscore.getAccuracy(songs[curSelected].songName, curDifficulty);
	// lerpScore = 0;
	// comment out because lag?
	if (!FreeplayState.soundTest)
	{
		var musicUsed = "assets/music/"+songs[curSelected].songName+"_Inst"+TitleState.soundExt;
		//FNFAssets.precacheSound(musicUsed);
		FlxG.sound.playMusic(musicUsed, 0);
	}

	var bullShit = 0;
	for (i in 0...iconArray.length)
	{
		iconArray[i].alpha = 0.6;
	}

	iconArray[curSelected].alpha = 1;
	for (item in grpSongs.members)
	{
		item.targetY = bullShit - curSelected;
		bullShit++;

		item.alpha = 0.6;

		if (item.targetY == 0)
		{
			item.alpha = 1;
		}
	}
	var dealphaedColors = [];
	for (color in (Reflect.field(charJson,songs[curSelected].songCharacter).colors)) {
		var newColor = colorFromString(color);
		//newColor.alphaFloat = 0.5;
		dealphaedColors.push(newColor);
	}
	
	changeDiff(0);
	
	var coolors = ["black"];
	if (Reflect.hasField(charJson, songs[curSelected].songCharacter)) {
		coolors = Reflect.field(charJson, songs[curSelected].songCharacter).colors;
	} else {
		coolors = Reflect.field(iconJson, songs[curSelected].songCharacter).colors;
	}
	FlxTween.color(bg,0.5, bg.color, colorFromString(coolors[0]));
	if (OptionsHandler.options.style) {
		record.changeColor(coolors, songs[curSelected].songCharacter, songs[curSelected].week,
			songs[curSelected].songName, curDifficulty);
		
	}
	
	infoPanel.changeSong(songs[curSelected].songName, curDifficulty);
}