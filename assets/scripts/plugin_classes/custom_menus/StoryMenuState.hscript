var scoreText;

var weekData = [];
var weekNames = [];
var curDifficulty = 1;

var weekCharacters = [];
var weekNums = [];
var lastWeek = 0;
var coolors = [];
/*var weekNames:Array<String> = [
    "",
    "Daddy Dearest",
    "Spooky Month",
    "PICO",
    "MOMMY MUST MURDER",
    "RED SNOW",
    "hating simulator ft. moawling"
];*/
var weekTitles = [];
var curWeek = 0;
var txtWeekTitle;
var txtTracklist;
var txtTrack;
var weekCharactersArray;
var grpWeekText;

var grpLocks;

var difficultySelectors;
var grpDifficulty;
var leftArrow;
var rightArrow;
var oldMode = false;
var yellowBG;

function create()
{
    trace(DifficultyIcons.getDefaultDiffFP());
    curDifficulty = DifficultyIcons.getDefaultDiffFP();
    transIn = FlxTransitionableState.defaultTransIn;
    transOut = FlxTransitionableState.defaultTransOut;

    if (FlxG.sound.music != null)
    {
        FlxG.sound.playMusic(FNFAssets.getSound('assets/music/weekTheme/CMENU0' + TitleState.soundExt));
    }
    var storySongJson = CoolUtil.parseJson(FNFAssets.getText('assets/data/storySonglist.json'));
    var versionJson = 0;
    if (storySongJson.version == null) {
        versionJson = 1;
    } else {
        versionJson = storySongJson.version;
    }
    togglePersistUpdate(true);
    togglePersistDraw(true);
    var songsParsed = [[]];
    var titlesParsed = [];
    var charsParsed = [[]];
    var flagsParsed = [[]];
    var colorsParsed = [];
    if (versionJson == 2) {
        var useWeek = 0;
        for (weekInfo in storySongJson.weeks)
        {
            var songArray = [":flushed:"];
            if (weekInfo.visibleFlags != null && !OptionsHandler.options.ignoreUnlocks) {
                var canUse = true;
                var reg = new EReg("week-(.+)", "g");
                for (flag in weekInfo.visibleFlags)
                {
                    switch (flag)
                    {
                        case "debug":
                            if (debugTarget)
                                continue;
                            else
                            {
                                canUse = false;
                                break;
                            }
                        case reg.match(flag):
                            var week = Std.parseInt(reg.matched(1));
                            var diffJson = CoolUtil.parseJson(FNFAssets.getText("assets/images/custom_difficulties/difficulties.json"));
                            var difficultiesFP = diffJson.difficulties;
                            var existsWeek = false;
                            for (diff in 0...difficultiesFP.length)
                            {
                                if (Highscore.getWeekScore(week, diff) != 0)
                                {
                                    existsWeek = true;
                                    break;
                                }
                            }
                            if (existsWeek)
                            {
                                continue;
                            }
                            else
                            {
                                canUse = false;
                                break;
                            }
                        default:
                            continue;
                    }
                }
                if (!canUse) {
                    useWeek++;
                    continue;
                }
                
            }
            songsParsed.push(songArray.concat(weekInfo.songs));
            titlesParsed.push(weekInfo.name);
            var charArray = [];

            var dadInfo;
            var bfInfo;
            var gfInfo;
            var coolorInfo;
            var flagsInfo = [];

            if (weekInfo.dad == null)
                dadInfo = "dad";
            else
                dadInfo = weekInfo.dad;

            if (weekInfo.bf == null)
                bfInfo = "bf";
            else
                bfInfo = weekInfo.bf;

            if (weekInfo.gf == null)
                gfInfo = "gf";
            else
                gfInfo = weekInfo.gf;

            if (weekInfo.color == null)
                coolorInfo = 0xFFF9CF51;
            else
                coolorInfo = weekInfo.color;

            if (weekInfo.flags == null)
                flagsInfo = [];
            else
                flagsInfo = weekInfo.flags;
                
            charArray.push(dadInfo);
            charArray.push(bfInfo);
            charArray.push(gfInfo);
            coolors.push(coolorInfo);
            charsParsed.push(charArray);
            weekInfo.flags = flagsInfo;
            var flagArray = weekInfo;
            flagsParsed.push(flagArray);
            weekNums.push(useWeek);
            useWeek++;
        }
    }
    if (versionJson == 1) {
        oldMode = true;
        songsParsed = storySongJson.songs;
        titlesParsed = storySongJson.weekNames;
        charsParsed = storySongJson.characters;
        for (_ in 0...songsParsed.length) {
            coolors.push(0xFFF9CF51);
        }
    }
    for (storySongList in songsParsed)
    {
        var weekSongs = [];
        for (song in storySongList)
        {
            if (storySongList[0] == song)
            {
                weekNames.push(song);
            }
            else
            {
                weekSongs.push(song);
            }
        }
        weekData.push(weekSongs);
    }
    for (weekTitle in titlesParsed)
    {
        weekTitles.push(weekTitle);
    }
    for (storyCharList in charsParsed)
    {
        var weekChars = [];
        for (char in storyCharList)
        {
            weekChars.push(char);
        }
        weekCharacters.push(weekChars);
    }
    if (!oldMode && !OptionsHandler.options.ignoreUnlocks) {
        for (flags in flagsParsed) {
            var canUse = true;
            var reg = new EReg("week-(.+)", "g");
            for (flag in flags) {

                switch (flag) {
                    case "debug":
                        if (debugTarget)
                            continue;
                        else
                        {
                            canUse = false;
                            break;
                        }
                    case (reg.match(flag)):
                        var week = Std.parseInt(reg.matched(1));
                        var diffJson = CoolUtil.parseJson(FNFAssets.getText("assets/images/custom_difficulties/difficulties.json"));
                        var difficultiesFP = diffJson.difficulties;
                        var existsWeek = false;
                        for (diff in 0...difficultiesFP.length)
                        {
                            if (Highscore.getWeekScore(week, diff) != 0)
                            {
                                existsWeek = true;
                                break;
                            }
                        }
                        if (existsWeek)
                        {
                            continue;
                        }
                        else
                        {
                            canUse = false;
                            break;
                        }
                    default:
                        continue;
                }
            }
            StoryMenuState.weekUnlocked.push(canUse);
        }
    } else {
        for (_ in 0...weekTitles.length) {
            StoryMenuState.weekUnlocked.push(true);
        }
    }
    
    
    scoreText = new FlxText(10, 10, 0, "SCORE: 49324858", 36);
    scoreText.setFormat("VCR OSD Mono", 32);

    txtWeekTitle = new FlxText(FlxG.width * 0.7, 10, 0, "", 32);
    txtWeekTitle.setFormat("VCR OSD Mono", 32, 0xFFffffff, "right");
    txtWeekTitle.alpha = 0.7;

    var rankText = new FlxText(0, 10);
    rankText.text = 'RANK: GREAT';
    rankText.setFormat("assets/fonts/vcr.ttf", 32);
    rankText.size = scoreText.size;
    rankText.x = (FlxG.width - rankText.width) / 2;

    var ui_tex = FlxAtlasFrames.fromSparrow('assets/images/campaign_menu_UI_assets.png', 'assets/images/campaign_menu_UI_assets.xml');
    yellowBG = new FlxSprite(0, 56).makeGraphic(FlxG.width, 400, 0xFFffffff);

    grpWeekText = new FlxGroup();
    add(grpWeekText);

    var blackBarThingie = new FlxSprite().makeGraphic(FlxG.width, 56, 0xFF000000);
    add(blackBarThingie);


    grpLocks = new FlxGroup();
    add(grpLocks);
    weekCharactersArray = new FlxGroup();
    trace("Line 70");

    for (i in 0...weekData.length)
    {
        if (i < weekData.length-1)
        {
            var weekThing = new MenuItem(0, yellowBG.y + yellowBG.height + 10, weekNums[i]);
            weekThing.y += ((weekThing.height + 20) * i);
            weekThing.targetY = i;
            grpWeekText.add(weekThing);

            weekThing.x = (FlxG.width - weekThing.width) / 2;
            weekThing.antialiasing = true;

            var lock = new FlxSprite(weekThing.width + 10 + weekThing.x);
            lock.frames = ui_tex;
            lock.animation.addByPrefix('lock', 'lock');
            lock.animation.play('lock');
            lock.ID = i;
            lock.antialiasing = true;
            lock.visible = !StoryMenuState.weekUnlocked[i];
            grpLocks.add(lock);
        }

        var group = new FlxGroup();
        trace("before new group");

        weekCharactersArray.add(group);
        trace("after new group");
        
        for (char in 0...3)
        {
            var weekCharacterThing = new MenuCharacter((FlxG.width * 0.25) * (1 + char) - 150, weekCharacters[i][char]);
            weekCharacterThing.y += 70;
            weekCharacterThing.antialiasing = true;
            
            weekCharacterThing.setGraphicSize(Std.int(weekCharacterThing.jsonScale * weekCharacterThing.width));
            weekCharacterThing.updateHitbox();
            weekCharacterThing.x += weekCharacterThing.offsetX;
            weekCharacterThing.y += weekCharacterThing.offsetY;
            weekCharacterThing.flipX = weekCharacterThing.jsonFlipX;
            weekCharactersArray.members[i].add(weekCharacterThing);
        }
        if (i != curWeek) {
            weekCharactersArray.members[i].kill();
        }
    }

    trace("Line 96");


    difficultySelectors = new FlxGroup();
    add(difficultySelectors);

    trace("Line 124");
    var diffJson = CoolUtil.parseJson(FNFAssets.getText("assets/images/custom_difficulties/difficulties.json"));
    leftArrow = new FlxSprite(grpWeekText.members[0].x + grpWeekText.members[0].width + 10, grpWeekText.members[0].y + 10);
    leftArrow.frames = ui_tex;
    leftArrow.animation.addByPrefix('idle', "arrow left");
    leftArrow.animation.addByPrefix('press', "arrow push left");
    leftArrow.animation.play('idle');
    difficultySelectors.add(leftArrow);
    trace("line 186");
    var difficultyLevels = [];
    for (i in diffJson.difficulties) {
        difficultyLevels.push(i.name);
    }
    grpDifficulty = new DifficultyIcons(difficultyLevels, curDifficulty, leftArrow.x + 130, leftArrow.y);
    trace("line 188");

    difficultySelectors.add(grpDifficulty.group);
    trace("line 190");
    trace(grpDifficulty.activeDiff);
    trace(grpDifficulty.activeDiff.width);
    trace(leftArrow.y);
    rightArrow = new FlxSprite(grpDifficulty.activeDiff.x + grpDifficulty.activeDiff.width + 50, leftArrow.y);
    trace("line 192");
    rightArrow.frames = ui_tex;
    rightArrow.animation.addByPrefix('idle', 'arrow right');
    rightArrow.animation.addByPrefix('press', "arrow push right", 24, false);
    rightArrow.animation.play('idle');
    difficultySelectors.add(rightArrow);

    trace("Line 150");

    add(yellowBG);
    add(weekCharactersArray);


    txtTrack = new FlxText(FlxG.width * 0.05, yellowBG.x + yellowBG.height + 80, 0, "TRACKS", 32);
    txtTrack.alignment = 'center';
    txtTrack.font = rankText.font;
    txtTrack.color = 0xFFe595a7;
    add(txtTrack);
    
    txtTracklist = new FlxText(FlxG.width * 0.05, yellowBG.x + yellowBG.height + 100, 0, "", 32);
    txtTracklist.alignment = 'center';
    txtTracklist.font = rankText.font;
    txtTracklist.color = 0xFFe55777;
    add(txtTracklist);
    // add(rankText);
    add(scoreText);
    add(txtWeekTitle);

    updateText();

    trace("Line 165");
}

var lerpScore = 0;
var intendedScore = 0;
var intendedAccuracy = 0;
var lerpAccuracy = 0;
var movedBack = false;
var selectedWeek = false;
var stopspamming = false;

function update(elapsed)
{
    // scoreText.setFormat('VCR OSD Mono', 32);
    lerpScore = Math.floor(FlxMath.lerp(lerpScore, intendedScore, 0.5));

    scoreText.text = "WEEK SCORE:" + lerpScore;

    txtWeekTitle.text = weekTitles[curWeek].toUpperCase();
    txtWeekTitle.x = FlxG.width - (txtWeekTitle.width + 10);

    // FlxG.watch.addQuick('font', scoreText.font);
    difficultySelectors.visible = StoryMenuState.weekUnlocked[curWeek];
    grpLocks.members[curWeek].visible = !StoryMenuState.weekUnlocked[curWeek];
    grpLocks.forEach(function(lock)
    {
        lock.y = grpWeekText.members[lock.ID].y;
    });

    if (!movedBack)
    {
        if (!selectedWeek)
        {
            if (controls.UP_MENU)
            {
                changeWeek(-1);
            }

            if (controls.DOWN_MENU)
            {
                changeWeek(1);
            }

            if (controls.RIGHT_MENU_H)
                rightArrow.animation.play('press')
            else
                rightArrow.animation.play('idle');

            if (controls.LEFT_MENU_H)
                leftArrow.animation.play('press');
            else
                leftArrow.animation.play('idle');

            if (controls.RIGHT_MENU)
                changeDifficulty(1);
            if (controls.LEFT_MENU)
                changeDifficulty(-1);
        }

        if (controls.ACCEPT)
        {
            selectWeek();
        }
    }

    if (controls.BACK && !movedBack && !selectedWeek)
    {
        FlxG.sound.play('assets/sounds/cancelMenu' + TitleState.soundExt);
        movedBack = true;
        LoadingState.loadAndSwitchState(new MainMenuState());
    }
}

function selectWeek()
{
    if (!StoryMenuState.weekUnlocked[curWeek])
        return;
    
    if (stopspamming == false)
    {
        FlxG.sound.play('assets/sounds/confirmMenu' + TitleState.soundExt);

        weekCharactersArray.members[curWeek+1].members[0].animation.play('dadConfirm');
        weekCharactersArray.members[curWeek+1].members[1].animation.play('bfConfirm');
        weekCharactersArray.members[curWeek+1].members[2].animation.play('gfConfirm');
        stopspamming = true;
    }
    StoryMenuState.storySongPlaylist = weekData[curWeek+1];
    PlayState.storyPlaylist = StoryMenuState.storySongPlaylist;
    PlayState.defaultPlaylistLength = weekData[curWeek+1].length;
    PlayState.isStoryMode = true;
    ModifierState.isStoryMode = true;
    selectedWeek = true;

    var diffic = "";

    diffic = grpDifficulty.getDiffEnding();

    PlayState.storyDifficulty = curDifficulty;
    for (peckUpAblePath in PlayState.storyPlaylist) {
        if (!FNFAssets.exists('assets/data/'+peckUpAblePath.toLowerCase()+'/'+peckUpAblePath.toLowerCase() + diffic+'.json')) {
            // probably messed up difficulty
            trace("UH OH DIFFICULTY DOESN'T EXIST FOR A SONG");
            trace("CHANGING TO DEFAULT DIFFICULTY");
            diffic = "";
            PlayState.storyDifficulty = DifficultyIcons.getDefaultDiffFP();
        }
    }
    PlayState.SONG = Song.loadFromJson(PlayState.storyPlaylist[0].toLowerCase() + diffic, PlayState.storyPlaylist[0].toLowerCase());
    PlayState.storyWeek = curWeek+1;
    PlayState.campaignScore = 0;
    PlayState.campaignAccuracy = 0;
    new FlxTimer().start(1, function(tmr)
    {
        if (!OptionsHandler.options.skipModifierMenu)
            LoadingState.loadAndSwitchState(new ModifierState());
        else {
            if (FlxG.sound.music != null)
                FlxG.sound.music.stop();
            LoadingState.loadAndSwitchState(new PlayState());
        }
    });
}

function changeDifficulty(change)
{
    grpDifficulty.changeDifficulty(change, curWeek);
    curDifficulty = grpDifficulty.difficulty;



    grpDifficulty.activeDiff.alpha = 0;
    grpDifficulty.activeDiff.y = leftArrow.y - 15;
    rightArrow.setPosition(grpDifficulty.activeDiff.x + grpDifficulty.activeDiff.width + 50, leftArrow.y);
    intendedScore = Highscore.getWeekScore(curWeek+1, curDifficulty);
    intendedAccuracy = Highscore.getWeekAccuracy(curWeek+1, curDifficulty);


    FlxTween.tween(grpDifficulty.activeDiff, {y: leftArrow.y + 15, alpha: 1}, 0.07);
}

function changeWeek(change)
{
    lastWeek = curWeek+1;
    curWeek += change;

    curWeek = FlxMath.wrap(curWeek, 0, weekData.length - 2);
    var bullShit = 0;

    for (item in grpWeekText.members)
    {
        item.targetY = bullShit - curWeek;
        bullShit++;
    }

    FlxG.sound.play('assets/sounds/scrollMenu' + TitleState.soundExt);
    updateText();
}

function updateText()
{

    weekCharactersArray.members[lastWeek].kill();
    weekCharactersArray.members[curWeek+1].revive();
    txtTracklist.text = "";

    switch (weekCharactersArray.members[curWeek+1].members[0].like)
    {
        case 'parents-christmas':
            weekCharactersArray.members[curWeek+1].members[0].offset.set(200, 200);
            weekCharactersArray.members[curWeek+1].members[0].setGraphicSize(Std.int(weekCharactersArray.members[curWeek+1].members[0].width * 0.99));

        case 'senpai':
            weekCharactersArray.members[curWeek+1].members[0].offset.set(130, 0);
            weekCharactersArray.members[curWeek+1].members[0].setGraphicSize(Std.int(weekCharactersArray.members[curWeek+1].members[0].width * 0.9));

        case 'mom':
            weekCharactersArray.members[curWeek+1].members[0].offset.set(100, 200);
            weekCharactersArray.members[curWeek+1].members[0].setGraphicSize(Std.int(weekCharactersArray.members[curWeek+1].members[0].width * 1));

        case 'dad':
            weekCharactersArray.members[curWeek+1].members[0].offset.set(120, 200);
            weekCharactersArray.members[curWeek+1].members[0].setGraphicSize(Std.int(weekCharactersArray.members[curWeek+1].members[0].width * 1));

        default:
            weekCharactersArray.members[curWeek+1].members[0].offset.set(100, 100);
            weekCharactersArray.members[curWeek+1].members[0].setGraphicSize(Std.int(weekCharactersArray.members[curWeek+1].members[0].width * 1));
            // weekCharactersArray.members[curWeek].members[0].updateHitbox();
    }
    yellowBG.color = coolors[curWeek];
    var stringThing = weekData[curWeek+1];

    for (i in stringThing)
    {
        txtTracklist.text += "\n" + i;
    }
    txtTracklist.text += "\n shitty workaround but ok";
    trace(txtTracklist.text);
    txtTracklist.text = StringTools.replace(txtTracklist.text.toUpperCase(), "-", " ");
    trace(txtTracklist.text);
    txtTracklist.x = (FlxG.width - txtTracklist.width) / 2;
    txtTracklist.x -= FlxG.width * 0.35;
    txtTrack.x = (FlxG.width - txtTrack.width) / 2;
    txtTrack.x -= FlxG.width * 0.35;

    if (!switchTarget)
    {
        intendedScore = Highscore.getWeekScore(curWeek+1, curDifficulty);
        intendedAccuracy = Highscore.getWeekScore(curWeek+1, curDifficulty);
    }
}